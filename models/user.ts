import mongoose, { Schema, Types, Document, Model } from "mongoose";

export interface IUser extends Document {
  //Kinda datatype for userSchema
  _id: Types.ObjectId;
  username: string;
  email: string;
  password: string;
  bio?: string|null;
  profileImgKey?: string;
  following: Types.ObjectId[];
  followers: Types.ObjectId[];
  posts: number;
  createdAt: Date;
  updatedAt: Date;
}

const userSchema = new Schema<IUser>( //kinda datatype/schema for model
  {
    // _id: {              as auto generated by mongoose
    //   type: Schema.Types.ObjectId,
    //   auto: true,
    // },
    username: {
      type: String,
      required: true,
      unique: true,
      trim: true, //removes extra space from start and end of string
      lowercase: true,
      validate: {
        validator: (v: string) => /^[a-zA-Z0-9_]+$/.test(v), // regex to allow only alphanumeric characters and underscores
        message: (props: { value: string }) =>
          `${props.value} is not a valid username!`,
      },
    },
    email: {
      type: String,
      required: true,
      unique: true,
      trim: true,
      lowercase: true,
      validate: {
        validator: (v: string) =>
          /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(v), // regex to validate email format
        message: (props: { value: string }) =>
          `${props.value} is not a valid email!`,
      },
    },
    password: {
      type: String,
      required: true,
      trim: true,
      validate: {
        validator: (v: string) => v.length >= 8, // password must be at least 8 characters long
        message: (props: { value: string }) =>
          `Password must be at least 8 characters long!`,
      },
    },
    bio: {
      type: String,
      trim: true,
      default: null,
      validate: {
        validator: (v: string | null) => !v || v.length <= 150, // bio must be at most 150 characters long
        message: (props: { value: string }) =>
          `Bio must be at most 150 characters long!`,
      },
    },
    profileImgKey: {
      type: String,
      trim: true,
    },
    following: {
      type: [Schema.Types.ObjectId],
      ref: "User",
      default: [],
    },

    followers: {
      type: [Schema.Types.ObjectId],
      ref: "User",
      default: [],
    },
    posts: {
      type: Number,
      default: 0,
    },
  },
  {
    timestamps: true,
  }
);

const User: Model<IUser> =
  mongoose.models.User || mongoose.model<IUser>("User", userSchema); // If the model already exists, use it; otherwise, create a new one
export default User;
